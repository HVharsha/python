from sympy import*
x, y, z = symbols('x, y, z')
w2= integrate (( x*y*z ) ,(z ,0 , 3-x-y ) ,(y ,0 , 3-x ) ,(x ,0 , 3 ) )
print ('Answer=', w2 )



from sympy import*
x = Symbol ('x')
y = Symbol ('y')
z = Symbol ('z')
a = Symbol ('a')
b = Symbol ('b')
c = Symbol ('c')
w2 = integrate (1 ,(z,0,c*(1-x/a-y/b)) ,(y,0,b*(1-x/a)) ,(x,0,a))
print ('Answer=',w2)




from sympy import * 
import numpy as np 
def RungeKutta (g,x0 ,h,y0 ,xn): 
    x,y= symbols ('x,y') 
    f= lambdify ([x,y],g) 
    print('Result by RK4 method:') 
    print ('y( %3.3f'%x0,') = %3.3f '%y0) 
    xt=x0+h 
    Y=[y0] 
    while xt<=xn: 
        k1=h*f(x0 ,y0) 
        k2=h*f(x0+h/2, y0+k1/2) 
        k3=h*f(x0+h/2, y0+k2/2) 
        k4=h*f(x0+h, y0+k3) 
        y1=y0+(1/6)*(k1+2*k2+2*k3+k4) 
        Y. append (y1) 
        print ('y( %3.6f'%xt,') = %3.6f '%y1) 
        x0=xt 
        y0=y1 
        xt=xt+h 
    return np. round (Y,2) 
RungeKutta ('1+y/x',1,0.2,2,2)




x0=1 
y0=2 
y1=2.2156 
y2=2.4649 
y3=2.7514 
h=0.1 
x1=x0+h 
x2=x1+h 
x3=x2+h 
x4=x3+h 
def f(x,y): 
   return x ** 2+(y/2) 
y10 =f(x0 , y0) 
y11 =f(x1 ,y1) 
y12 =f(x2 ,y2) 
y13 =f(x3 ,y3) 
y4p =y0+(4*h/3)*(2*y11-y12+2*y13) 
print ('Predicted value of y4 is %3.3f '% y4p) 
y14 =f(x4 ,y4p ); 
for i in range (1,4): 
   y4=y2+(h/3)*(y14 +4*y13 +y12 ); 
   print('Corrected value of y4 after \t iteration %d is \t %3.5f\t'%(i,y4)) 
   y14=f(x4 ,y4);






  from sympy import beta , gamma 
m=5; 
n=7; 
m= float (m); 
n= float (n); 
s= beta (m,n); 
t=( gamma (m)* gamma (n))/ gamma (m+n); 
print('LHS = Beta(m,n)=',s,'\nRHS = Gamma(m)*Gamma(n))/Gamma(m+n)=',t)
if (abs (s-t)<=0.00001 ): 
     print ('Beta and Gamma are related ') 
else : 
     print ('Given values are wrong ')




  

import numpy as np
from sympy import*
import math
n = 4;
x = [ 45, 50, 55, 60 ];
y = [[0 for i in range(n)]
       for j in range(n)]; 
y[0][0] = 0.7071; 
y[1][0] = 0.7660; 
y[2][0] = 0.8192; 
y[3][0] = 0.8660; 
print('The forward difference table is:') 
for i in range(1, n): 
    for j in range(n - i): 
        y[j][i] = y[j + 1][i - 1] - y[j][i - 1]; 
for i in range(n): 
     print(x[i], end = "\t"); 
     for j in range(n - i): 
          print(y[i][j], end = "\t"); 
     print(""); 
value = 52; 
sum = y[0][0]; 
r = (value - x[0]) / (x[1] - x[0]); 
print('r=',r) 
for i in range(1,n): 
    sum = sum + (r_cal(r, i) * y[0][i]) / fact(i); 
print("\nValue at", value,"is", round(sum, 6));
def r_cal(r, n): 
    temp = r; 
    for i in range(1, n): 
        temp = temp * (r - i); 
    return temp; 
def fact(n): 
    f = 1; 
    for i in range(2, n + 1): 
        f=f * i; 
        return f;






        import numpy as np
def r_cal(r, n): 
    temp = r; 
 for i in range(1, n): 
    temp = temp * (r + i); 
return temp; 

x = np.array([0, 2, 4, 6, 8, 10],float)
y = np.array([0.15, 1.56, 2.15, 2.60, 3, 3.30],float)
print('Difference Table:')
n = len(x)
p = np.zeros([n, n+1])
for i in range(n):
 p[i, 0] = x[i]
 p[i, 1] = y[i]
for i in range(2, n+1): 
 for j in range(n+1-i): 
    p[j][i] = p[j + 1][i - 1] - p[j][i - 1]
for i in range(n): 
  for j in range(n+1-i): 
     print(round(p[i][j], 4), end = "\t") 
print("")
z = float(input('Enter the point at which you want to calculate:'))
sum = p[-1][1]
r = (z - x[-1]) / (x[1] - x[0])
for i in range(1,n): 
 sum = sum + (r_cal(r, i) * p[n-(i+1)][i+1]) / np.math.factorial(i)
print("\n Value at", z, "is", round(sum, 6))






 Simpsonâ€™s 1/3rd Rule 
def f(x):
 return 1/(1 + x**2) 
def simpson13(x0,xn,n):
 h = (xn - x0) / n
 integration = f(x0) + f(xn)
 for i in range(1,n):
 k = x0 + i*h
 
 if i%2 == 0:
 integration = integration + 2 * f(k)
 else:
 integration = integration + 4 * f(k)
 integration = integration * h/3
 return integration
lower_limit = float(input("Enter lower limit of integration: "))
upper_limit = float(input("Enter upper limit of integration: "))
sub_interval = int(input("Enter number of sub intervals: "))
result = simpson13(lower_limit, upper_limit, sub_interval)
print("Integration result by Simpson's 1/3 method is: %0.6f" % (result) )







Given sin 450=0.7071, sin 500=0.7660, sin 550=0.8192, sin 600=0.8660, find 
sin 52 using an appropriate interpolation formula.

import numpy as np
from sympy import*
import math
n = 4;
x = [ 45, 50, 55, 60 ];
y = [[0 for i in range(n)]
 for j in range(n)];
y[0][0] = 0.7071;
y[1][0] = 0.7660;
y[2][0] = 0.8192;
y[3][0] = 0.8660;
print('The forward difference table is:')
for i in range(1, n):
 for j in range(n - i):
 y[j][i] = y[j + 1][i - 1] - y[j][i - 1];
for i in range(n):
 print(x[i], end = "\t");
 for j in range(n - i):
 print(y[i][j], end = "\t");
 print("");
value = 52;
sum = y[0][0];
r = (value - x[0]) / (x[1] - x[0]);
print('r=',r)
for i in range(1,n):
 sum = sum + (r_cal(r, i) * y[0][i]) / fact(i);
print("\nValue at", value,"is", round(sum, 6));
def r_cal(r, n):
 temp = r;
 for i in range(1, n):
 temp = temp * (r - i);
 return temp;
def fact(n):
 f = 1;
 for i in range(2, n + 1):
 f=f * i;
 return f;







 Given sin 450=0.7071, sin 500=0.7660, sin 550=0.8192, sin 600=0.8660, find 
sin 570 using an appropriate interpolation formula.

import numpy as np
def r_cal(r, n): 
temp = r; 
for i in range(1, n): 
temp = temp * (r + i); 
return temp; 
x = np.array([0, 2, 4, 6, 8, 10],float)
y = np.array([0.15, 1.56, 2.15, 2.60, 3, 3.30],float)
print('Difference Table:')
n = len(x)
p = np.zeros([n, n+1])
for i in range(n):
 p[i, 0] = x[i]
 p[i, 1] = y[i]
for i in range(2, n+1): 
for j in range(n+1-i): 
p[j][i] = p[j + 1][i - 1] - p[j][i - 1]
for i in range(n): 
for j in range(n+1-i): 
print(round(p[i][j], 4), end = "\t") 
print("")
z = float(input('Enter the point at which you want to calculate:'))
sum = p[-1][1]
r = (z - x[-1]) / (x[1] - x[0])
for i in range(1,n): 
sum = sum + (r_cal(r, i) * p[n-(i+1)][i+1]) / np.math.factorial(i)
print("\n Value at", z, "is", round(sum, 6))
